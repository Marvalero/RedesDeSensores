/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'InfoMsg'
 * message type.
 */

public class InfoMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 2;

    /** Create a new InfoMsg of size 28. */
    public InfoMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new InfoMsg of the given data_length. */
    public InfoMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg with the given data_length
     * and base offset.
     */
    public InfoMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg using the given byte array
     * as backing store.
     */
    public InfoMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public InfoMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public InfoMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg embedded in the given message
     * at the given base offset.
     */
    public InfoMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InfoMsg embedded in the given message
     * at the given base offset and length.
     */
    public InfoMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <InfoMsg> \n";
      try {
        s += "  [SourceNode=0x"+Long.toHexString(get_SourceNode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [DestinationNode=0x"+Long.toHexString(get_DestinationNode())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [TOM=0x"+Long.toHexString(get_TOM())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [TTL=0x"+Long.toHexString(get_TTL())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [datos=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_datos(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: SourceNode
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'SourceNode' is signed (false).
     */
    public static boolean isSigned_SourceNode() {
        return false;
    }

    /**
     * Return whether the field 'SourceNode' is an array (false).
     */
    public static boolean isArray_SourceNode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'SourceNode'
     */
    public static int offset_SourceNode() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'SourceNode'
     */
    public static int offsetBits_SourceNode() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'SourceNode'
     */
    public int get_SourceNode() {
        return (int)getUIntBEElement(offsetBits_SourceNode(), 16);
    }

    /**
     * Set the value of the field 'SourceNode'
     */
    public void set_SourceNode(int value) {
        setUIntBEElement(offsetBits_SourceNode(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'SourceNode'
     */
    public static int size_SourceNode() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'SourceNode'
     */
    public static int sizeBits_SourceNode() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: DestinationNode
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'DestinationNode' is signed (false).
     */
    public static boolean isSigned_DestinationNode() {
        return false;
    }

    /**
     * Return whether the field 'DestinationNode' is an array (false).
     */
    public static boolean isArray_DestinationNode() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'DestinationNode'
     */
    public static int offset_DestinationNode() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'DestinationNode'
     */
    public static int offsetBits_DestinationNode() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'DestinationNode'
     */
    public int get_DestinationNode() {
        return (int)getUIntBEElement(offsetBits_DestinationNode(), 16);
    }

    /**
     * Set the value of the field 'DestinationNode'
     */
    public void set_DestinationNode(int value) {
        setUIntBEElement(offsetBits_DestinationNode(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'DestinationNode'
     */
    public static int size_DestinationNode() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'DestinationNode'
     */
    public static int sizeBits_DestinationNode() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: TOM
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'TOM' is signed (false).
     */
    public static boolean isSigned_TOM() {
        return false;
    }

    /**
     * Return whether the field 'TOM' is an array (false).
     */
    public static boolean isArray_TOM() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'TOM'
     */
    public static int offset_TOM() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'TOM'
     */
    public static int offsetBits_TOM() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'TOM'
     */
    public int get_TOM() {
        return (int)getUIntBEElement(offsetBits_TOM(), 16);
    }

    /**
     * Set the value of the field 'TOM'
     */
    public void set_TOM(int value) {
        setUIntBEElement(offsetBits_TOM(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'TOM'
     */
    public static int size_TOM() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'TOM'
     */
    public static int sizeBits_TOM() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: TTL
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'TTL' is signed (false).
     */
    public static boolean isSigned_TTL() {
        return false;
    }

    /**
     * Return whether the field 'TTL' is an array (false).
     */
    public static boolean isArray_TTL() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'TTL'
     */
    public static int offset_TTL() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'TTL'
     */
    public static int offsetBits_TTL() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'TTL'
     */
    public int get_TTL() {
        return (int)getUIntBEElement(offsetBits_TTL(), 16);
    }

    /**
     * Set the value of the field 'TTL'
     */
    public void set_TTL(int value) {
        setUIntBEElement(offsetBits_TTL(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'TTL'
     */
    public static int size_TTL() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'TTL'
     */
    public static int sizeBits_TTL() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: datos
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'datos' is signed (false).
     */
    public static boolean isSigned_datos() {
        return false;
    }

    /**
     * Return whether the field 'datos' is an array (true).
     */
    public static boolean isArray_datos() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'datos'
     */
    public static int offset_datos(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'datos'
     */
    public static int offsetBits_datos(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'datos' as a int[]
     */
    public int[] get_datos() {
        int[] tmp = new int[10];
        for (int index0 = 0; index0 < numElements_datos(0); index0++) {
            tmp[index0] = getElement_datos(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'datos' from the given int[]
     */
    public void set_datos(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_datos(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'datos'
     */
    public int getElement_datos(int index1) {
        return (int)getUIntBEElement(offsetBits_datos(index1), 16);
    }

    /**
     * Set an element of the array 'datos'
     */
    public void setElement_datos(int index1, int value) {
        setUIntBEElement(offsetBits_datos(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'datos'
     */
    public static int totalSize_datos() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'datos'
     */
    public static int totalSizeBits_datos() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'datos'
     */
    public static int elementSize_datos() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'datos'
     */
    public static int elementSizeBits_datos() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'datos'
     */
    public static int numDimensions_datos() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'datos'
     */
    public static int numElements_datos() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'datos'
     * for the given dimension.
     */
    public static int numElements_datos(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
